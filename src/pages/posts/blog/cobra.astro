---
import SuggestedArticles from "../../../components/SuggestedArticles.astro"
import Blog from "../../../layouts/Blog.astro";
---

<Blog>
  <h1>Cobra Docs</h1>
  <strong class="pub-time">29/10/2022</strong>

  <a href="https://github.com/hudson-newey/cobra">Cobra Source Code & Download</a>

  <div>
    <h2>Description</h2>
    <p>
      Similar to what TypeScript is to JavaScript, Cobra is an abstraction of Python which can compile into Python, but
      with improved types, memory management, and syntax. Cobra is also backwards compatible with Pytnon2.7 & Python3,
      to use (similar to TypeScript), rename your .py files to .pyc<br>
    </p>
  </div>

  <h2>How to Use</h2>
  <p>
    Compiling Singular <code>program.pyc</code> file.<br>
    <code>$ cobra.py ./program.pyc</code> <br> <br>

    Compiling an Entire Directory <code>src/</code> of <code>.pyc</code> files <br>
    <code>$ cobra.py src/</code>
  </p>

  <hr>

  <div>
    <h2>Current Features:</h2>
    <div class="container">
      <ul>
        <li>Constant Variables (via <code>const</code> keyword)</li>
        <div class="indent">
          <li>Displays an error if you try to reassign a value to a constant</li>
        </div>
        <li>Short code function declaration (via the fn keyword)</li>
        <li>Optimised output code</li>
        <div class="indent">
          <li>Optimised output code</li>
          <li>Removes empty lines</li>
          <li>Removes comments from output <code>.py</code> file</li>
          <li>Modifies functional assignments to primitives</li>
        </div>
        <li>Scans for unused imports</li>
      </ul>
    </div>
  </div>

  <hr>

  <div>
    <h2>Tag Breakdown</h2>

    <div class="container large-container">
      <h3>Comments</h3><br>
      A comment can be used to annotate a <code>.pyc</code> file, and while not affect the functionality. It is
      typically used to describe the a purpose of a line or statement. However, to save runtime performance, these
      comments will be removed from the final <code>.py</code> compiled file<br>

      <div class="indent">
        <b>Usage</b><br>
        <code># this is a comment</code>
        <br>
        <b>Context</b><br>
        <div class="code-block">
          # prints "Hello World!" to the command line <br>
          print("Hello world!")
        </div>
      </div>
    </div><br>

    <div class="container large-container">
      <h3>Functions</h3><br>
      A function shorthand can be used to save time and improve code readability.<br>

      <div class="indent">
        <b>Usage</b><br>
        <code>fn main():</code>
        <br>
        <b>Context</b><br>
        <div class="code-block">
          fn readFile(fileName): <br>
          <div class="indent">
            import os <br>
            with open(filepath, "r") as file: <br>
            <div class="indent">
              return file.read() <br>
            </div>
          </div>
        </div>
      </div>
    </div><br>

    <div class="container large-container">
      <h3>Variable Constants</h3><br>
      A constant can be used to prefix a variable which should not change. Cobra will throw an error if a constant
      variable is changed.<br>

      <div class="indent">
        <b>Usage</b><br>
        <code>const name: str = "John Doe"</code>
        <br>
        <b>Context</b><br>
        <div class="code-block">
          # creates a variable which cannot be changed to the value "Hello World!" <br>
          const message: str = "Hello World!" <br>
          # prints "Hello World!" to the command line <br>
          print(message)
        </div><br>
        <b>Throws Error When</b><br>
        <div class="code-block">
          const name: str = "John Doe" <br>
          name = "Alice"
        </div>
      </div>
    </div><br>
  </div>

  <hr>

  <div>
    <h2>Code Example</h2>

    <h3><b>Echo Name Example</b></h3>
    <div class="code-block">
      from time import sleep <br>
      <br>
      fn main(): <br>
      <div class="indent">
        const greeting: str = "Hello" <br>
        myAge: int = int() <br>
        <br>
        # get the user to input their details <br>
        print("Please input your name") <br>
        myName = input() <br>
        print("\nPlease input your age") <br>
        myAge = input() <br>
        <br>
        sleep(2) <br>
        const fullMessage: str = f"&#123;greeting&#125; &#123;myName&#125;!" <br>
        print(fullMessage) <br>
        <br>
      </div>
      main()
    </div>

    <h4><b>Output</b></h4>
    <div class="code-block">
      Code Compiled! <br>
      from time import sleep <br>
      def main(): <br>
      greeting: str = "Hello" <br>
      myAge: int = 0 <br>
      print("Please input your name") <br>
      myName = input() <br>
      print("\nPlease input your age") <br>
      myAge = input() <br>
      sleep(2) <br>
      fullMessage: str = f"&#123;greeting&#125; &#123;myName&#125;!" <br>
      print(fullMessage) <br>
      main() <br>


      -------------------- <br>
      Warning from testing/example.pyc <br>
      Currently Using Use of escaped newline character in print() statement <br>
      This can be incorrect because it can lead to worse code legibility and cross platform compatability issues. <br>
      e.g. Windows uses as a newline character \r\n while Linux and newer MacOS devices use \n,and older MacOS devices
      use \r for a newline <br>
      Suggestion: Consider using empty print() statements for newlines
    </div>

    <h4><i>Notes:</i></h4>
    <p>
      After the program is complete the compiled and printed <code>.py</code> file will be created in the same directory
      as the <code>.pyc</code> source file.
    </p>
  </div>
</Blog>
